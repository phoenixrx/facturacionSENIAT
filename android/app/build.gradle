apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

// This block makes the :app module self-sufficient by reading configuration
// directly from the gradle.properties file. This is the most robust approach
// to avoid Gradle's complex property inheritance and scoping issues.
def rootProjectProperties = new Properties()
def propertiesFile = new File(rootProject.projectDir, 'gradle.properties')
if (propertiesFile.exists()) {
    propertiesFile.withInputStream { stream ->
        rootProjectProperties.load(stream)
    }
} else {
    throw new GradleException("Could not find gradle.properties at " + propertiesFile.getAbsolutePath())
}

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

static def versionToNumber(major, minor, patch) {
  return patch * 100 + minor * 10000 + major * 1000000
}

def getRNVersion() {
  def version = providers.exec {
    workingDir(projectDir)
    commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
  }.standardOutput.asText.get().trim()

  def coreVersion = version.split("-")[0]
  def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

  return versionToNumber(
      major,
      minor,
      patch
  )
}
def rnVersion = getRNVersion()

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = (rootProjectProperties.getProperty('android.enableProguardInReleaseBuilds', 'false')).toBoolean()

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 */
def jscFlavor = 'org.webkit:android-jsc:+'

// The android {} block must be evaluated before the react {} block.
android {
    ndkVersion rootProjectProperties.getProperty('ndkVersion')

    buildToolsVersion rootProjectProperties.getProperty('buildToolsVersion')
    compileSdk Integer.parseInt(rootProjectProperties.getProperty('compileSdkVersion'))

    namespace 'com.phoenixrx.SIACmedica'
    defaultConfig {
        applicationId 'com.phoenixrx.SIACmedica'
        minSdkVersion Integer.parseInt(rootProjectProperties.getProperty('minSdkVersion'))
        targetSdkVersion Integer.parseInt(rootProjectProperties.getProperty('targetSdkVersion'))
        versionCode 3
        versionName "1.0.11"
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            shrinkResources (rootProjectProperties.getProperty('android.enableShrinkResourcesInReleaseBuilds', 'false')).toBoolean()
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs (rootProjectProperties.getProperty('android.enablePngCrunchInReleaseBuilds', 'true')).toBoolean()
        }
    }
    packagingOptions {
        jniLibs {
            useLegacyPackaging (rootProjectProperties.getProperty('expo.useLegacyPackaging', 'false')).toBoolean()
        }
    }
}

/**
 * This is the configuration block to customize your React Native Android app.
 */
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    // Use Expo CLI to bundle the app, this ensures the Metro config
    // works correctly with Expo projects.
    cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = "export:embed"

    if (rnVersion >= versionToNumber(0, 75, 0)) {
        autolinkLibrariesWithApp()
    }
}

// Apply static values from `gradle.properties` to the `android.packagingOptions`
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (rootProjectProperties.getProperty("android.packagingOptions.$prop", "")).split(",");
    for (i in 0..<options.size()) options[i] = options[i].trim();
    options -= ""

    if (options.length > 0) {
        println "android.packagingOptions.$prop += $options ($options.length)"
        options.each {
            android.packagingOptions[prop] += it
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    def isGifEnabled = (rootProjectProperties.getProperty('expo.gif.enabled', 'false')) == "true";
    def isWebpEnabled = (rootProjectProperties.getProperty('expo.webp.enabled', 'false')) == "true";
    def isWebpAnimatedEnabled = (rootProjectProperties.getProperty('expo.webp.animated', 'false')) == "true";

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
        }
    }

    if ((rootProjectProperties.getProperty('hermesEnabled', 'true')).toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

if (rnVersion < versionToNumber(0, 75, 0)) {
    apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle");
    applyNativeModulesAppBuildGradle(project)
}

apply plugin: 'com.google.gms.google-services'
